import os
import glob
import nbformat
import argparse
from nbconvert import HTMLExporter
from playwright.sync_api import sync_playwright
from markdownify import markdownify as md2html
import tempfile
import shutil
from PyPDF2 import PdfMerger
import pygments
from pygments import highlight
from pygments.formatters import HtmlFormatter
from pygments.lexers import get_lexer_for_filename, TextLexer
from pygments.util import ClassNotFound


def convert_code_to_html(code_path, output_path):
    """Convert any code file to HTML with syntax highlighting"""
    with open(code_path, 'r', encoding='utf-8') as f:
        code = f.read()

    # Try to get a lexer based on the filename
    try:
        lexer = get_lexer_for_filename(code_path)
    except ClassNotFound:
        # If no lexer is found, use plain text
        lexer = TextLexer()

    # Generate CSS for syntax highlighting
    formatter = HtmlFormatter(style='monokai', full=True)
    css = formatter.get_style_defs()

    # Highlight the code
    highlighted_code = highlight(code, lexer, formatter)

    # Add custom CSS for better presentation
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <style>
            {css}
            body {{ 
                font-family: Arial, sans-serif;
                line-height: 1.6;
                padding: 20px;
                background: white;
            }}
            .filename {{
                font-family: 'Courier New', monospace;
                font-size: 1.2em;
                color: #333;
                margin-bottom: 20px;
                padding: 10px;
                background: #f5f5f5;
                border-radius: 5px;
            }}
            .highlight {{
                padding: 20px;
                border-radius: 8px;
                margin: 20px 0;
            }}
            .language-info {{
                font-family: 'Courier New', monospace;
                font-size: 0.9em;
                color: #666;
                margin-top: -15px;
                margin-bottom: 15px;
                padding-left: 10px;
            }}
        </style>
    </head>
    <body>
        <div class="filename">{os.path.basename(code_path)}</div>
        <div class="language-info">Language: {lexer.name}</div>
        {highlighted_code}
    </body>
    </html>
    """

    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(html_content)


def convert_md_to_html(md_path, output_path):
    """Convert markdown to HTML"""
    with open(md_path, 'r', encoding='utf-8') as f:
        md_content = f.read()

    # Convert markdown to HTML
    html_content = md2html(md_content, heading_style="ATX")

    # Wrap in basic HTML structure
    full_html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <style>
            body {{ font-family: Arial, sans-serif; line-height: 1.6; padding: 20px; }}
            pre {{ background-color: #f5f5f5; padding: 10px; border-radius: 5px; }}
            code {{ font-family: 'Courier New', monospace; }}
            img {{ max-width: 100%; height: auto; }}
        </style>
    </head>
    <body>
        <div class="filename">{os.path.basename(md_path)}</div>
        {html_content}
    </body>
    </html>
    """

    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(full_html)


def convert_ipynb_to_html(ipynb_path, output_path):
    """Convert Jupyter notebook to HTML"""
    with open(ipynb_path, 'r', encoding='utf-8') as f:
        nb = nbformat.read(f, as_version=4)

    # Configure and create the HTML exporter
    html_exporter = HTMLExporter()
    html_exporter.template_name = 'classic'

    # Convert notebook to HTML
    html_content, _ = html_exporter.from_notebook_node(nb)

    # Add filename at the top
    html_content = f"""
    <div style="font-family: 'Courier New', monospace; font-size: 1.2em; color: #333; margin-bottom: 20px; padding: 10px; background: #f5f5f5; border-radius: 5px;">
        {os.path.basename(ipynb_path)}
    </div>
    {html_content}
    """

    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(html_content)


def html_to_pdf(html_path, pdf_path):
    """Convert HTML to PDF using Playwright"""
    with sync_playwright() as p:
        browser = p.chromium.launch()
        page = browser.new_page()
        page.goto(f'file://{os.path.abspath(html_path)}')
        # Add a small delay to ensure all styles are loaded
        page.wait_for_timeout(1000)
        page.pdf(path=pdf_path, format='A4')
        browser.close()


def main(root_dir='.',
         output_pdf='combined_output.pdf',
         file_types=None,
         exclude_patterns=None):
    """Main function to convert and combine files"""
    # Default file types if none specified
    if file_types is None:
        file_types = [
            'md', 'ipynb', 'py', 'js', 'ts', 'java', 'cpp', 'c', 'go', 'rs',
            'rb', 'php', 'cs', 'scala', 'kt', 'swift', 'r', 'sql', 'sh', 'pdf'
        ]

    # Create a temporary directory for intermediate files
    with tempfile.TemporaryDirectory() as temp_dir:
        pdf_files = []

        # First, collect all files and sort them
        all_files = []
        # Add files based on specified types
        for ext in file_types:
            pattern = f'**/*.{ext}'
            all_files.extend(
                glob.glob(os.path.join(root_dir, pattern), recursive=True))

        # Filter out excluded patterns
        if exclude_patterns:
            for pattern in exclude_patterns:
                all_files = [
                    f for f in all_files
                    if not glob.fnmatch.fnmatch(f, pattern)
                ]

        # Sort files by path
        all_files.sort()

        # Process each file
        for i, filepath in enumerate(all_files):
            print(f"Processing {filepath}...")

            try:
                if filepath.endswith('.pdf'):
                    # For PDF files, just add them to the list
                    pdf_files.append(filepath)
                else:
                    # For non-PDF files, convert them
                    html_path = os.path.join(temp_dir, f'doc_{i}.html')
                    pdf_path = os.path.join(temp_dir, f'doc_{i}.pdf')

                    if filepath.endswith('.md'):
                        convert_md_to_html(filepath, html_path)
                    elif filepath.endswith('.ipynb'):
                        convert_ipynb_to_html(filepath, html_path)
                    else:
                        # All other files are treated as code files
                        convert_code_to_html(filepath, html_path)

                    # Convert HTML to PDF
                    html_to_pdf(html_path, pdf_path)
                    pdf_files.append(pdf_path)
            except Exception as e:
                print(f"⚠️ Failed to process {filepath}: {str(e)}")
                continue

        if pdf_files:
            # Merge all PDFs
            merger = PdfMerger()
            for pdf_file in pdf_files:
                try:
                    merger.append(pdf_file)
                except Exception as e:
                    print(f"⚠️ Failed to merge {pdf_file}: {str(e)}")
                    continue

            merger.write(output_pdf)
            merger.close()
            print(f"\n✅ All files merged into: {output_pdf}")
        else:
            print("\n⚠️ No files were processed successfully.")


def parse_args():
    parser = argparse.ArgumentParser(
        description=
        'Convert and merge various file types (code, markdown, notebooks, PDFs) into a single PDF.',
        epilog=
        'Supported code file types: .py, .js, .ts, .java, .cpp, .c, .go, .rs, .rb, .php, .cs, .scala, .kt, .swift, .r, .sql, .sh (and more)'
    )
    parser.add_argument(
        '-d',
        '--directory',
        default='.',
        help='Root directory to search for files (default: current directory)')
    parser.add_argument(
        '-o',
        '--output',
        default='combined_output.pdf',
        help='Output PDF file name (default: combined_output.pdf)')
    parser.add_argument(
        '-t',
        '--types',
        nargs='+',
        default=[
            'md', 'ipynb', 'py', 'js', 'ts', 'java', 'cpp', 'c', 'go', 'rs',
            'rb', 'php', 'cs', 'scala', 'kt', 'swift', 'r', 'sql', 'sh', 'pdf'
        ],
        help=
        'File types to process (default: includes common programming languages, markdown, notebooks, and PDFs)'
    )
    parser.add_argument('-e',
                        '--exclude',
                        nargs='+',
                        default=[],
                        help='Patterns to exclude (e.g., "*draft*" "test/*")')

    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()
    main(root_dir=args.directory,
         output_pdf=args.output,
         file_types=args.types,
         exclude_patterns=args.exclude)
